AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWS Elasticsearch and Machine Learning Example
Parameters:
  ENVIRONMENT:
    Type: String

Resources:

  ESMLExecLambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "ESMLExecLambdaRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "es:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "sqs:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "rekognition:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "comprehend:*"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "polly:*"
                Resource: "*"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # FileProcessSqsQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: !Sub "${AWS::StackName}-${AWS::AccountId}-fileprocess-queue"

  # QueuePolicy:
  #   Type: AWS::SQS::QueuePolicy
  #   DependsOn:
  #     - FileProcessSqsQueue
  #   Properties:
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS: '*'
  #           Action:
  #             - SQS:SendMessage
  #           Resource: !GetAtt FileProcessSqsQueue.Arn
  #           Condition:
  #             ArnLike:
  #               aws:SourceArn: !Sub "arn:aws:s3:*:*:${AWS::StackName}-${AWS::AccountId}-documentstore-${ENVIRONMENT}"
  #     Queues:
  #       - !Ref FileProcessSqsQueue

  DocumentStoreS3:
    Type: AWS::S3::Bucket
    # DependsOn: 
    #   - FileProcessSqsQueue
    #   - QueuePolicy
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-documentstore-${ENVIRONMENT}"
      NotificationConfiguration:
        # QueueConfigurations:
        # - Event: "s3:ObjectCreated:*"
        #   Queue: !GetAtt FileProcessSqsQueue.Arn
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt ESIndexingLambda.Arn

  DocumentStoreS3BucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref DocumentStoreS3
      PolicyDocument: 
        Statement: 
          - 
            Sid: DocumentStoreS3PolicyDoc
            Effect: "Allow"
            Action: "s3:GetObject"
            Principal: "*"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref DocumentStoreS3, "/*"]]

  ElasticsearchDomain: 
      Type: "AWS::Elasticsearch::Domain"
      Properties:
        DomainName: !Sub "${AWS::StackName}-${AWS::AccountId}-${ENVIRONMENT}"
        ElasticsearchClusterConfig: 
          DedicatedMasterEnabled: false
          InstanceCount: 1
          InstanceType: t2.small.elasticsearch
          ZoneAwarenessEnabled: false
        EBSOptions: 
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: "gp2"
        ElasticsearchVersion: "6.3"
        SnapshotOptions: 
          AutomatedSnapshotStartHour: "0"
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: 'true'
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                AWS: "*"
              Action: "es:*"
              Resource: "*"
          #TODO: Set authentication/ vpc

  ESIndexingLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ESIndexingLambda-${ENVIRONMENT}
      Handler: lambda_es_indexing.lambda_handler
      Runtime: python3.6 
      CodeUri: dist
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt ESMLExecLambdaRole.Arn
      Events:
        # MySQSEvent:
        #   Type: SQS
        #   Properties:
        #     Queue: !GetAtt FileProcessSqsQueue.Arn
        #     BatchSize: 10
        MyS3PutEvent:
          Type: S3
          Properties:
            Bucket: !Ref DocumentStoreS3
            Events: "s3:ObjectCreated:*"
      Environment:
        Variables:
          ES_HOST: !GetAtt ElasticsearchDomain.DomainEndpoint
          ES_PORT: 443


  LexHookLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub LexHookLambda-${ENVIRONMENT}
      Handler: lambda_lex_hook.lambda_handler
      Runtime: python3.6
      CodeUri: dist
      MemorySize: 128
      Timeout: 20
      Role: !GetAtt ESMLExecLambdaRole.Arn
      Environment:
        Variables:
          ES_HOST: !GetAtt ElasticsearchDomain.DomainEndpoint
          ES_PORT: 443

  